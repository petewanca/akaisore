{"version":3,"sources":["contexts/GlobalContext.js","style/index.js","components/Form/SearchForm.js","components/Header/Header.js","components/Results/Comment.js","components/Results/Post.js","components/Results/PostsContainer.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","GlobalContextProvider","children","useState","posts","setPosts","comments","setComments","Provider","value","Param","styled","span","Variable","VariableName","FunctionName","Operator","Value","NumValue","CommentedOut","Indent","div","SecondIndent","SearchForm","search","setSearch","sort","setSort","limit","setLimit","useContext","fetchData","a","fetch","split","join","response","json","data","onSubmit","e","preventDefault","then","error","console","log","alert","placeholder","type","onChange","target","className","Header","Comment","comment","body","author","Post","post","showPost","setShowPost","showComments","setShowComments","postDetail","selftext","href","url","rel","useEffect","permalink","str","title","postHeader","length","slice","moment","created_utc","format","onClick","subreddit_name_prefixed","subreddit_subscribers","gilded","score","ups","downs","num_comments","map","key","id","PostsContainer","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.eb7b547a.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const GlobalContext = createContext();\r\n\r\nexport const GlobalContextProvider = ({ children }) => {\r\n    const [posts, setPosts] = useState('');\r\n    const [comments, setComments] = useState('');\r\n    return (\r\n        <GlobalContext.Provider value={{ posts, setPosts, comments, setComments }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Param = styled.span`\r\n    color: #dbac56;\r\n    font-style: italic;\r\n`;\r\n\r\nexport const Variable = styled.span`\r\n    color: #e0453a;\r\n`;\r\n\r\nexport const VariableName = styled.span`\r\n    color: #e0bf3a;\r\n`;\r\n\r\nexport const FunctionName = styled.span`\r\n    color: #55c5c9;\r\n`;\r\n\r\nexport const Operator = styled.span`\r\n    color: #cf74cf;\r\n`;\r\n\r\nexport const Value = styled.span`\r\n    color: #65cf9f;\r\n`;\r\n\r\nexport const NumValue = styled.span`\r\n    color: #bf66f2;\r\n`;\r\n\r\nexport const CommentedOut = styled.span`\r\n    color: #8f8f8f;\r\n`;\r\n\r\nexport const Indent = styled.div`\r\n    margin-left: 1%;\r\n`;\r\n\r\nexport const SecondIndent = styled.div`\r\n    margin-left: 3%;\r\n`;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Variable, VariableName, FunctionName, Operator, Param } from '../../style';\r\nimport '../../index.css';\r\nimport { GlobalContext } from '../../contexts/GlobalContext';\r\n\r\nexport const SearchForm = () => {\r\n    const [search, setSearch] = useState('');\r\n    const [sort, setSort] = useState('relevance');\r\n    const [limit, setLimit] = useState(5);\r\n    const { setPosts } = useContext(GlobalContext);\r\n\r\n    const fetchData = async () => {\r\n        let response = await fetch(\r\n            `http://www.reddit.com/search.json?q=${search\r\n                .split(' ')\r\n                .join('+')}&sort=${sort}&limit=${limit}&self:yes`\r\n        );\r\n        let data = await response.json();\r\n        return data.data.children;\r\n    };\r\n\r\n    const handleForm = (e) => {\r\n        e.preventDefault();\r\n        if (!search) {\r\n            alert('enter search text');\r\n        } else {\r\n            try {\r\n                fetchData().then((data) => {\r\n                    setPosts(data);\r\n                });\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleForm}>\r\n            <Variable>let </Variable>\r\n            <VariableName>searchTerm </VariableName>\r\n            <Operator>= </Operator>\r\n            <input\r\n                placeholder=\"'enter a search term'\"\r\n                type='text'\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n            />\r\n            <br />\r\n            <Variable>let </Variable>\r\n            <VariableName>sortBy </VariableName>\r\n            <Operator>= </Operator>\r\n            <select onChange={(e) => setSort(e.target.value)}>\r\n                <option value='relevance'>'relevance'</option>\r\n                <option value='top'>'top'</option>\r\n                <option value='new'>'new'</option>\r\n                <option value='comments'>'comments'</option>\r\n            </select>\r\n            <br />\r\n            <Variable>let </Variable>\r\n            <VariableName>limitTo </VariableName>\r\n            <Operator>= </Operator>\r\n            <select className='select-num' onChange={(e) => setLimit(e.target.value)}>\r\n                <option value={5}>5</option>\r\n                <option value={10}>10</option>\r\n                <option value={25}>25</option>\r\n                <option value={50}>50</option>\r\n            </select>\r\n            <br />\r\n            <br />\r\n            <button type='submit'>\r\n                <FunctionName>\r\n                    ExecuteSearch\r\n                    <Operator>(</Operator>\r\n                    <Param> searchTerm, sortBy, limitTo </Param>\r\n                    <Operator>)</Operator>\r\n                </FunctionName>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { SearchForm } from '../Form/SearchForm';\r\nimport {\r\n    Value,\r\n    Variable,\r\n    VariableName,\r\n    Param,\r\n    FunctionName,\r\n    Operator,\r\n    NumValue\r\n} from '../../style';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            <p>\r\n                <Variable>const </Variable>\r\n                <VariableName>express </VariableName>\r\n                <Operator>= </Operator>\r\n                <FunctionName>require</FunctionName>\r\n                <Operator>\r\n                    (<Value>'express'</Value>)\r\n                </Operator>\r\n                ;\r\n            </p>\r\n            <p>\r\n                <Variable>const </Variable>\r\n                <VariableName>app </VariableName>\r\n                <Operator>= </Operator>\r\n                <FunctionName>\r\n                    express<Operator>()</Operator>\r\n                </FunctionName>\r\n                ;\r\n            </p>\r\n            <p>\r\n                <Variable>const </Variable>\r\n                <VariableName>mongoose </VariableName>\r\n                <Operator>= </Operator>\r\n                <FunctionName>require</FunctionName>\r\n                <Operator>\r\n                    (<Value>'mongoose'</Value>)\r\n                </Operator>\r\n                ;\r\n            </p>\r\n            <p>\r\n                <Variable>const </Variable>\r\n                <VariableName>port </VariableName>\r\n                <Operator>= </Operator>\r\n                <FunctionName>\r\n                    process<Operator>.</Operator>env<Operator>.</Operator>PORT{' '}\r\n                    <Operator>|| </Operator>\r\n                    <NumValue>3000</NumValue>\r\n                </FunctionName>\r\n                ;\r\n            </p>\r\n            <p>\r\n                <Variable>const </Variable>\r\n                <VariableName>\r\n                    {'{'} ExecuteSearch {'}'}{' '}\r\n                </VariableName>\r\n                <Operator>= </Operator>\r\n                <FunctionName>require</FunctionName>\r\n                <Operator>\r\n                    (<Value>'./routes/api/search/'</Value>)\r\n                </Operator>\r\n                ;\r\n            </p>\r\n            <p>\r\n                <FunctionName>require</FunctionName>\r\n                <Operator>\r\n                    (<Value>'dotenv'</Value>)\r\n                </Operator>\r\n                <Operator>\r\n                    .<FunctionName>config</FunctionName>()\r\n                </Operator>\r\n                ;\r\n            </p>\r\n            <br />\r\n            <p>\r\n                <FunctionName>app</FunctionName>\r\n                <Operator>.</Operator>\r\n                <FunctionName>use</FunctionName>\r\n                <Operator>(</Operator>\r\n                <VariableName>express</VariableName>\r\n                <Operator>.</Operator>\r\n                <Variable>urlencoded</Variable>\r\n                <Operator>(</Operator>\r\n                {'{'} <VariableName>extended</VariableName>\r\n                <Operator>:</Operator> <Value>true</Value> {'}'}\r\n                <Operator>))</Operator>;\r\n            </p>\r\n            <p>\r\n                <FunctionName>app</FunctionName>\r\n                <Operator>.</Operator>\r\n                <FunctionName>use</FunctionName>\r\n                <Operator>(</Operator>\r\n                <VariableName>express</VariableName>\r\n                <Operator>.</Operator>\r\n                <FunctionName>json</FunctionName>\r\n                <Operator>())</Operator>;\r\n            </p>\r\n            <br />\r\n            <p>\r\n                <FunctionName>mongoose</FunctionName>\r\n                <Operator>.</Operator>\r\n                <VariableName>connect</VariableName>\r\n                <Operator>(</Operator>\r\n                <FunctionName>process</FunctionName>\r\n                <Operator>.</Operator>\r\n                <FunctionName>env</FunctionName>\r\n                <Operator>.</Operator>\r\n                <FunctionName>DB_LINK</FunctionName>\r\n                <Operator>, {'{'}</Operator>\r\n                <VariableName>useNewUrlParser</VariableName>\r\n                <Operator>:</Operator> <Value>true</Value>\r\n                <Operator>,</Operator> <VariableName>useUnifiedTopology</VariableName>\r\n                <Operator>:</Operator> <Value>true</Value>\r\n                <Operator>{'}'})</Operator>;\r\n            </p>\r\n            <br />\r\n            <SearchForm />\r\n            <br />\r\n            <div>\r\n                <FunctionName>module.exports </FunctionName>\r\n                <Operator>= </Operator>\r\n                <Operator>(</Operator>\r\n                <Param> akaisore </Param>\r\n                <Operator>) </Operator>\r\n                <Operator>=> {'{'}</Operator>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Variable, VariableName, Operator, Value } from '../../style';\r\n\r\nexport const Comment = ({ comment }) => {\r\n    return (\r\n        <div>\r\n            {comment.data.body ? (\r\n                <div>\r\n                    <Variable>const </Variable>\r\n                    <VariableName>{comment.data.author} </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <Value>'{comment.data.body}'</Value>;\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Comment } from './Comment';\r\nimport {\r\n    Param,\r\n    Variable,\r\n    VariableName,\r\n    FunctionName,\r\n    Operator,\r\n    Value,\r\n    CommentedOut,\r\n    Indent,\r\n    SecondIndent,\r\n    NumValue\r\n} from '../../style';\r\nimport moment from 'moment';\r\n\r\nexport const Post = ({ post }) => {\r\n    const [showPost, setShowPost] = useState(false);\r\n    const [showComments, setShowComments] = useState(false);\r\n    const [comments, setComments] = useState('');\r\n    let postDetail = post.selftext ? (\r\n        post.selftext\r\n    ) : (\r\n        <a href={post.url} target='_blank' rel='noopener noreferrer'>\r\n            {post.url}\r\n        </a>\r\n    );\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let response = await fetch(`http://www.reddit.com${post.permalink}.json`);\r\n            let data = await response.json();\r\n            return data[1].data.children;\r\n        };\r\n\r\n        try {\r\n            fetchData().then((data) => {\r\n                setComments(data);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }, [post]);\r\n\r\n    const toggleComments = () => {\r\n        setShowComments(!showComments);\r\n    };\r\n\r\n    const togglePost = () => {\r\n        setShowPost(!showPost);\r\n    };\r\n\r\n    const str = post.title.split(' ').join('');\r\n    const postHeader = str.length > 20 ? str.slice(0, 20) : str;\r\n\r\n    return (\r\n        <Indent>\r\n            <br />\r\n            <p>\r\n                <Variable>const </Variable>\r\n                <VariableName>{postHeader} </VariableName>\r\n                <Operator>\r\n                    = ( <Param>author, {post.author}</Param> ) => {'{'}\r\n                </Operator>\r\n            </p>\r\n            <SecondIndent>\r\n                <p>\r\n                    {/* eslint-disable-next-line */}\r\n                    <CommentedOut> // {post.title}</CommentedOut>\r\n                </p>\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>created </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <Value>\r\n                        '{moment(post.created_utc * 1000).format('dddd, MMMM Do YYYY, h:mm:ss a')}'\r\n                    </Value>\r\n                    ;\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    <button onClick={togglePost}>\r\n                        <FunctionName>showBody</FunctionName>\r\n                        <Operator>()</Operator>\r\n                    </button>\r\n                    ;\r\n                </p>\r\n                <br />\r\n                {showPost ? (\r\n                    <p>\r\n                        {/* eslint-disable-next-line */}\r\n                        <CommentedOut> /* {postDetail} */</CommentedOut>\r\n                    </p>\r\n                ) : null}\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>subReddit </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <Value>'{post.subreddit_name_prefixed}'</Value>;\r\n                </p>\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>subRedditSubs </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <NumValue>{post.subreddit_subscribers}</NumValue>;\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    {/* eslint-disable-next-line */}\r\n                    <CommentedOut> // Gilded: {post.gilded}</CommentedOut>\r\n                </p>\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>score </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <NumValue>{post.score}</NumValue>;\r\n                </p>\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>upVotes </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <NumValue>{post.ups}</NumValue>;\r\n                </p>\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>downVotes </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <NumValue>{post.downs}</NumValue>;\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    <Variable>let </Variable>\r\n                    <VariableName>comments </VariableName>\r\n                    <Operator>= </Operator>\r\n                    <NumValue>{post.num_comments}</NumValue>;\r\n                </p>\r\n                {post.num_comments ? (\r\n                    <p>\r\n                        <button onClick={toggleComments}>\r\n                            <FunctionName>\r\n                                showComments\r\n                                <Operator>()</Operator>\r\n                            </FunctionName>\r\n                        </button>\r\n                        ;\r\n                    </p>\r\n                ) : null}\r\n                {/* POST COMMENTS */}\r\n                {showComments\r\n                    ? comments.map((comment) => <Comment key={comment.data.id} comment={comment} />)\r\n                    : null}\r\n            </SecondIndent>\r\n            <p>\r\n                <Operator>{'}'}</Operator>;\r\n            </p>\r\n        </Indent>\r\n    );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../../contexts/GlobalContext';\r\nimport { Post } from './Post';\r\nimport { Indent } from '../../style';\r\n\r\nexport const PostsContainer = () => {\r\n    const { posts } = useContext(GlobalContext);\r\n\r\n    return posts.length ? (\r\n        <Indent>\r\n            {posts.map((post) => (\r\n                <Post key={post.data.id} post={post.data} />\r\n            ))}\r\n        </Indent>\r\n    ) : null;\r\n};\r\n","import React from 'react';\r\nimport { Operator, Value, VariableName, FunctionName, NumValue } from '../../style';\r\nexport const Footer = () => {\r\n    return (\r\n        <div>\r\n            <p>\r\n                <Operator>{'}'}</Operator>\r\n            </p>\r\n            <br />\r\n            <p>\r\n                <FunctionName>app</FunctionName>\r\n                <Operator>.</Operator>\r\n                <NumValue>listen</NumValue>\r\n                <Operator>(</Operator>\r\n                <VariableName>port</VariableName>, <Operator>()</Operator> <Operator>=> </Operator>\r\n                <FunctionName>console</FunctionName>\r\n                <Operator>.</Operator>\r\n                <FunctionName>log</FunctionName>\r\n                <Operator>(</Operator>`<Value>server up @ http://localhost:</Value>\r\n                <VariableName>$</VariableName>\r\n                <Operator>{'{'}</Operator>\r\n                <VariableName>port</VariableName>\r\n                <Operator>{'}'}</Operator>`<Operator>)</Operator>\r\n                <Operator>)</Operator>;\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport { Header } from './components/Header/Header';\nimport { PostsContainer } from './components/Results/PostsContainer';\nimport { Indent } from './style';\nimport { Footer } from './components/Footer/Footer';\n\nconst App = () => {\n    return (\n        <div>\n            <Header />\n            <Indent>\n                <PostsContainer />\n            </Indent>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalContextProvider } from './contexts/GlobalContext';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <GlobalContextProvider>\n        <App />\n    </GlobalContextProvider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}